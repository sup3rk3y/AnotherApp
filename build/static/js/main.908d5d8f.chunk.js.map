{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","setState","onRemove","index","e","preventDefault","onChange","_newText","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","id","fa","children","onClick","React","Component","Board","notes","add","allNotes","update","nextId","newText","i","console","log","prevState","map","note","objectSpread","text","concat","toConsumableArray","uniqueId","filter","src_Note","key","Boolean","window","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.908d5d8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaPencilAlt} from 'react-icons/fa';\r\nimport {FaTrash} from 'react-icons/fa';\r\nimport {FaSave} from 'react-icons/fa';\r\n\r\n\r\nclass Note extends React.Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      editing: false\r\n    }\r\n    this.edit = this.edit.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.save = this.save.bind(this);\r\n    this.renderForm = this.renderForm.bind(this);\r\n    this.renderDisplay = this.renderDisplay.bind(this);\r\n  }\r\n\r\n\r\n  edit(){\r\n    this.setState({editing: true});\r\n  }\r\n\r\n  remove(){\r\n    this.props.onRemove(this.props.index);\r\n  }\r\n\r\n  save(e) {\r\n    e.preventDefault();\r\n    this.props.onChange(this._newText.value, this.props.index);\r\n    this.setState({\r\n      editing: false\r\n    })\r\n  }\r\n\r\n  renderForm(){\r\n    return(\r\n      <div className=\"note\">\r\n        <form onSubmit={this.save}>\r\n          <textarea ref={input => this._newText = input}/>\r\n          <button id=\"save\"><FaSave /></button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderDisplay(){\r\n    return (\r\n      <div className=\"note\">\r\n        <p>{this.props.children}</p>\r\n        <span>\r\n          <button onClick={this.edit} id=\"edit\"><FaPencilAlt /></button>\r\n          <button onClick={this.remove} id=\"remove\"><FaTrash /></button>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (this.state.editing ? this.renderForm() : this.renderDisplay());\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Note;\r\n","import React from 'react';\r\nimport Note from './Note';\r\nimport {FaPlus} from 'react-icons/fa';\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      notes: []\r\n    };\r\n    this.add = this.add.bind(this);\r\n    this.allNotes = this.allNotes.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.nextId = this.nextId.bind(this);\r\n  }\r\n\r\n  update(newText, i){\r\n    console.log(newText, \" at \", i);\r\n    this.setState(prevState => ({\r\n      notes: prevState.notes.map(\r\n        note => (note.id !== i) ? note : {...note, note: newText}\r\n      )\r\n    }) )\r\n  }\r\n\r\n  add(text) {\r\n    this.setState(prevState => ({\r\n      notes: [\r\n        ...prevState.notes,\r\n        {\r\n          id: this.nextId(),\r\n          note: text\r\n        }\r\n      ]\r\n\r\n    }) )\r\n  }\r\n\r\n  nextId(){\r\n    this.uniqueId = this.uniqueId || 0;\r\n    return this.uniqueId++;\r\n  }\r\n\r\n  remove(id) {\r\n    console.log(\"remove item at :\" ,id);\r\n    this.setState(prevState => ({\r\n      notes: prevState.notes.filter(note => note.id !== id)\r\n    }) )\r\n  }\r\n\r\n  allNotes(note, i){\r\n    return (\r\n      <Note key={i} index={i} onChange={this.update} onRemove={this.remove}>{note.note}</Note>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"board\">\r\n        {this.state.notes.map(this.allNotes)}\r\n        <button onClick={this.add.bind(null, \"New Note\")} id=\"add\">\r\n          <FaPlus />\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Board;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}